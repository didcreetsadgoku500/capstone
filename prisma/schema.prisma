generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Permission {
  id     BigInt @id @default(autoincrement())
  userId String
  scope  String
  role   String
}

model Tournament {
  tournamentId   BigInt @id @default(autoincrement())
  tourName String
  tourDesc String
  bannerUrl String @default("/strafeSmoke.jpg")
  gamemode Gamemode
  stages Stage[]
  registrations Registrations[]
  minRank Int?
  maxRank Int?
  usesBWS Boolean?
  public Boolean @default(false)

}

model Stage {
  tournamentId BigInt 
  tournament Tournament @relation(fields: [tournamentId], references: [tournamentId], onDelete: Cascade)
  stageNo Int @default(sequence())
  stageName String
  isBracket Boolean
  matches Match[]
  mappool Mappool[]
  public Boolean @default(false)

  @@id([tournamentId, stageNo])
}

model Match {
  tournamentId BigInt
  stageNo Int
  matchId Int @default(sequence())
  stage Stage @relation(fields: [tournamentId, stageNo], references: [tournamentId, stageNo], onDelete: Cascade, onUpdate: Cascade)

  team1Score Int @default(0)
  team2Score Int @default(0)
  team1Id String?
  team2Id String?

  matchStatus MatchStatus
  matchDateTime DateTime?
  referee String?

  @@id([tournamentId, matchId])
}

model Mappool {
  mappoolItemId BigInt @id @default(autoincrement()) 
  tournamentId BigInt
  stageNo Int
  mapId Int?
  mods String
  modIndex Int
  stage Stage @relation(fields: [tournamentId, stageNo], references: [tournamentId, stageNo], onDelete: Cascade, onUpdate: Cascade)

}

model Registrations {
  regId BigInt @id @default(autoincrement())
  tournamentId BigInt
  userId String
  tournament Tournament @relation(fields: [tournamentId], references: [tournamentId], onDelete: Cascade)


}

enum Gamemode {
  STANDARD
  TAIKO
  CTB
  MANIA
}

enum MatchStatus {
  NOT_STARTED
  IN_PROGRESS
  PAUSED
  ENDED
}
